@inject IJSRuntime JS


<div @onkeydown="Move" style="outline: none;" @ref="CanvaContainer" id="CanvaContainer" tabindex="0" @onclick="() => SendNewBullet(0)">
    <BECanvas Width="@_canvasWidth" Height="@_canvasHeight" @ref="_canvasReference"></BECanvas>

    <div id="EquipmentDiv" style="display: @_eqDisplayed">
        <div class="InventoryShopElement" id="InventoryShopElement-MaxHealth">
            <span class="InventoryShopElement-Text">Max Health</span>
            <span class="PriceText" id="PriceText-0"></span>
        </div>
        <div class="InventoryShopElement" id="InventoryShopElement-Speed">
            <span class="InventoryShopElement-Text">Speed</span>
            <span class="PriceText" id="PriceText-1"></span>
        </div>
        <div class="InventoryShopElement" id="InventoryShopElement-Damage">
            <span class="InventoryShopElement-Text">Damage</span>
            <span class="PriceText" id="PriceText-2"></span>
        </div>
        <div class="InventoryShopElement" id="InventoryShopElement-BulletS">
            <span class="InventoryShopElement-Text">Bullet's Speed</span>
            <span class="PriceText" id="PriceText-3"></span>
		</div>
        <div id="InventoryHintText">
            <p>Use arrow keys to navigate and space to commit purchase</p>
        </div>
    </div>

</div>
<div style="outline: none; position:absolute;" @ref="BulletsContainer" id="BulletsContainer">
    <BECanvas Width="@_canvasWidth" Height="@_canvasHeight" @ref="_bulletCanvasReference"></BECanvas>
</div>


<div id="CoinsContainer" class="StatsContainer">
	<label>Coins: @_gameOptions.Coins</label>
</div>
<div id="LevelContainer" class="StatsContainer">
    <label>Level: @_gameOptions.Level</label>
</div>

<div id="HealthBarContainer">
    <div id="HealthBar"></div>
    <span id="HealthBarInformation">@myShip.Health/@myShip.MaxHealth</span>
</div>


<div class="TutorialDiv" id="MoveTutorial">
    <!--move-->
    <span class="HintText">Click WSAD to move</span>
</div>
<div class="TutorialDiv" id="ShootTutorial">
    <!--click to shoot-->
    <span class="HintText">Left click to shoot</span>
</div>
<div class="TutorialDiv" id="OpenInventoryTutorial">
    <!--click e to open inventory-->
    <span class="HintText">Click E to open inventory</span>
</div>
<div class="TutorialDiv" id="CloseInventoryTutorial">
    <!--click e again-->
    <span class="HintText">Click E again to close inventory window</span>
</div>


<img src="/images/myShip.png" class="ResourceImage" @ref="_myShipImage"/>
<img src="/images/asteroid.png" class="ResourceImage" @ref="_asteroidImage" />
<img src="/images/TankShip.png" class="ResourceImage" @ref="_tankShipImage" />
<img src="/images/RainShip.png" class="ResourceImage" @ref="_rainShipImage" />
<img src="/images/Torpedoe.png" class="ResourceImage" @ref="_bombImage" />


<script>
    window.focusElement = (element) => {
        element.focus();
    }
    window.getScreenHeight = () => {
		let height = document.getElementById("CanvaContainer").offsetHeight;
		return height;
    }
    window.getScreenWidth = () => {
        let height = document.getElementById("CanvaContainer").offsetWidth;
        return height;
    }
    window.ShopElementChanged = (currentElement, currentPrices) => {
        for (let element of document.getElementById("EquipmentDiv").children) {
            element.style.border = "none";
        }
        document.getElementById("InventoryShopElement-" + currentElement).style.border = "0.5px solid yellow";
        for (let i = 0; i < currentPrices.length; i++) {
            document.getElementById("PriceText-" + i).innerText = currentPrices[i];
		}
        for(let i = 0; i < currentPrices.length; i++)
        {
            console.log(parseInt(document.getElementById("PriceText-" + i).textContent));
			let playerCoins = parseInt(document.getElementById("CoinsContainer").textContent.split(" ")[1]);
			console.log(playerCoins);
            if(parseInt(document.getElementById("PriceText-" + i).textContent) > playerCoins)
            {
                document.getElementById("PriceText-" + i).style.color = "red";
            }
            else
            {
                document.getElementById("PriceText-" + i).style.color = "white";
			}
        }
	}
    window.UpdateTutorial = (previousTutorial, currentTutorial) => {
		document.getElementById(previousTutorial).remove();
		document.getElementById(currentTutorial).style.display = "flex";
    }
    window.EndTutorial = (lastTutorial) => {
        document.getElementById(lastTutorial).remove();
	}
    window.UpdateHealt = (health, maxHealth) => {
        console.log(200 * health / maxHealth + "px");
		if(health >= 0)
        {
            document.getElementById("HealthBar").style.width = 200 * health / maxHealth + "px";
            if(health / maxHealth > 0.6)
            {
				document.getElementById("HealthBar").style.backgroundColor = "green";
            }
            else if(health / maxHealth > 0.35)
			{
                document.getElementById("HealthBar").style.backgroundColor = "orange";
            }
            else
            {
                document.getElementById("HealthBar").style.backgroundColor = "red";
			}
        }
        else
        {
            document.getElementById("HealthBar").style.width = "0px";
		}
    }
</script>