@inject IJSRuntime JS


<div @onkeydown="Move" style="outline: none;" @ref="CanvaContainer" id="CanvaContainer" tabindex="0" @onclick='() => SendNewBullet(0, "myShip")'>
    <BECanvas Width="@_canvasWidth" Height="@_canvasHeight" @ref="_canvasReference"></BECanvas>

    <div id="EquipmentDiv" style="display: @_eqDisplayed">
        <div class="InventoryShopElement" id="InventoryShopElement-MaxHealth">
            <span class="InventoryShopElement-Text">Max Health</span>
            <span class="PriceText" id="PriceText-0"></span>
        </div>
        <div class="InventoryShopElement" id="InventoryShopElement-Speed">
            <span class="InventoryShopElement-Text">Speed</span>
            <span class="PriceText" id="PriceText-1"></span>
        </div>
        <div class="InventoryShopElement" id="InventoryShopElement-Damage">
            <span class="InventoryShopElement-Text">Damage</span>
            <span class="PriceText" id="PriceText-2"></span>
        </div>
        <div class="InventoryShopElement" id="InventoryShopElement-BulletS">
            <span class="InventoryShopElement-Text">Bullet's Speed</span>
            <span class="PriceText" id="PriceText-3"></span>
		</div>
        <div class="InventoryShopElement" id="InventoryShopElement-Refill">
            <span class="InventoryShopElement-Text">Refill health</span>
            <span class="PriceText" id="PriceText-4"></span>
        </div>
        <div id="InventoryHintText">
            <p>Use arrow keys to navigate and space to commit purchase</p>
        </div>
    </div>
    <div id="GameOverDisplay">
        <p>Game Over</p>
        <img src="/images/Retry.png" />
        <p>Click R to restart</p>
    </div>
</div>
<div style="outline: none; position:absolute;" @ref="BulletsContainer" id="BulletsContainer">
    <BECanvas Width="@_canvasWidth" Height="@_canvasHeight" @ref="_bulletCanvasReference"></BECanvas>
</div>


<div id="CoinsContainer" class="StatsContainer">
	<label>Coins: @_gameOptions.Coins</label>
</div>
<div id="LevelContainer" class="StatsContainer">
    <label>Level: @_gameOptions.Level</label>
</div>

<div id="HealthBarContainer">
    <div id="HealthBar"></div>
    <span id="HealthBarInformation">@myShip.Health/@myShip.MaxHealth</span>
</div>


<div class="TutorialDiv" id="MoveTutorial">
    <!--move-->
    <span class="HintText">Click WSAD to move</span>
</div>
<div class="TutorialDiv" id="ShootTutorial">
    <!--click to shoot-->
    <span class="HintText">Left click to shoot</span>
</div>
<div class="TutorialDiv" id="OpenInventoryTutorial">
    <!--click e to open inventory-->
    <span class="HintText">Click E to open inventory</span>
</div>
<div class="TutorialDiv" id="CloseInventoryTutorial">
    <!--click e again-->
    <span class="HintText">Click E again to close inventory window</span>
</div>


<img src="/images/myShip.png" class="ResourceImage" @ref="_myShipImage"/>
<img src="/images/asteroid.png" class="ResourceImage" @ref="_asteroidImage" />
<img src="/images/TankShip.png" class="ResourceImage" @ref="_tankShipImage" />
<img src="/images/RainShip.png" class="ResourceImage" @ref="_rainShipImage" />
<img src="/images/Torpedoe.png" class="ResourceImage" @ref="_bombImage" />
<img src="/images/Boss.png" class="ResourceImage" @ref="_bossImage" />


<script>
    window.focusElement = (element) => {
        element.focus();
    }
    window.getScreenHeight = () => {
		let height = document.getElementById("CanvaContainer").offsetHeight;
		return height;
    }
    window.getScreenWidth = () => {
        let height = document.getElementById("CanvaContainer").offsetWidth;
		console.log(height);
        return height;
    }
        window.ShopElementChanged = (currentElement, currentPrices) => {
            /*
            for (let i = 0; i < currentPrices.length; i++) {
                document.getElementById("PriceText-" + i).innerText = currentPrices[i];
            }
            for(let i = 0; i < currentPrices.length; i++)
            {
                let playerCoins = parseInt(document.getElementById("CoinsContainer").textContent.split(" ")[1]);
                let price = 0;
                if(document.getElementById("PriceText-" + i).textContent != "Max")
                {
                    price = parseInt(document.getElementById("PriceText-" + i).textContent)
                }
                if(price > playerCoins)
                {
                    document.getElementById("PriceText-" + i).style.setProperty("color", "red", "important");
                }
                else
                {
                    document.getElementById("PriceText-" + i).style.color = "white";
                }
                if(parseInt(document.getElementById("PriceText-" + i).textContent) == 0)
                {
                    console.log("it is ivnoked")
					document.getElementById("PriceText-" + i).style.color = "red";
					document.getElementById("InventoryShopElement-" + i).textContent = "Max";
                }
            }
            for (let element of document.getElementById("EquipmentDiv").children) {
                element.style.border = "none";
            }
            document.getElementById("InventoryShopElement-" + currentElement).style.border = "0.5px solid yellow";
            */
           // --- 1. Ustaw ceny ---
            for (let i = 0; i < currentPrices.length; i++) {
                document.getElementById("PriceText-" + i).innerText = currentPrices[i];
            }

            // --- 2. Kolory i "Max" ---
            for (let i = 0; i < currentPrices.length; i++) {
                let playerCoins = parseInt(document.getElementById("CoinsContainer").textContent.split(" ")[1]);
                let priceTextEl = document.getElementById("PriceText-" + i);
                let price = 0;

                if (priceTextEl.textContent !== "Max") {
                    price = parseInt(priceTextEl.textContent);
                }

                if (price === 0) {
                    console.log("it is invoked");
                    priceTextEl.textContent = "Max";
                    priceTextEl.style.color = "red";
                    continue; // pomijamy dalsze sprawdzanie koloru
                }

                if (price > playerCoins) {
                    priceTextEl.style.setProperty("color", "red", "important");
                } else {
                    priceTextEl.style.color = "white";
                }
            }

            // --- 3. Obramowanie aktywnego elementu ---
            for (let element of document.getElementById("EquipmentDiv").children) {
                element.style.border = "none";
            }
            document.getElementById("InventoryShopElement-" + currentElement).style.border = "0.5px solid yellow";
        };

    window.UpdateTutorial = (previousTutorial, currentTutorial) => {
		document.getElementById(previousTutorial).style.display = "none";
		document.getElementById(currentTutorial).style.display = "flex";
    }
    window.EndTutorial = (lastTutorial) => {
        document.getElementById(lastTutorial).style.display = "none";
	}
    window.UpdateHealt = (health, maxHealth) => {
		if(health >= 0)
        {
            document.getElementById("HealthBar").style.width = 200 * health / maxHealth + "px";
            if(health / maxHealth > 0.6)
            {
				document.getElementById("HealthBar").style.backgroundColor = "green";
            }
            else if(health / maxHealth > 0.35)
			{
                document.getElementById("HealthBar").style.backgroundColor = "orange";
            }
            else
            {
                document.getElementById("HealthBar").style.backgroundColor = "red";
			}
        }
        else
        {
            document.getElementById("HealthBar").style.width = "0px";
		}
    }
    window.ShowGameOver = () => {
        document.getElementById("GameOverDisplay").style.display = "flex";
	}
    window.HideGameOver = () => {
        document.getElementById("GameOverDisplay").style.display = "none";
	}
    window.StartTutorialAgain = () => {
		document.getElementById("MoveTutorial").style.display = "flex";
    }
</script>